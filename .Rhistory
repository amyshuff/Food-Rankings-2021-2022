#Enrollment for small campuses will be an over estimate.
mutate(ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT"),
ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA)) %>%
rename(District.Number = "DISTRICT NUMBER") %>%
group_by(District.Number) %>%
summarise(tea.all.stud = sum(ENROLLMENT),
tea.eco.dis = sum(eco.dis, na.rm = T)) %>%
mutate(eco.dis.pct = (tea.eco.dis/tea.all.stud)*100)
#This is something we request for the school rankings.
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6) %>%
#Small enrollment numbers are masked with numbers like <10, so here we'll remove all the "<" characters.
#Enrollment for small campuses will be an over estimate.
mutate(ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT"),
ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA)) %>%
rename(District.Number = "DISTRICT NUMBER") %>%
group_by(District.Number) %>%
summarise(tea.all.stud = sum(ENROLLMENT),
tea.eco.dis = sum(eco.dis, na.rm = T)) %>%
mutate(eco.dis.pct = (tea.eco.dis/tea.all.stud)*100)
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6)
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6) %>%
#Small enrollment numbers are masked with numbers like <10, so here we'll remove all the "<" characters.
#Enrollment for small campuses will be an over estimate.
mutate(ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT"),
ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA))
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6) %>%
#Small enrollment numbers are masked with numbers like <10, so here we'll remove all the "<" characters.
#Enrollment for small campuses will be an over estimate.
mutate(ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT"),
ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA)) %>%
rename(District.Number = "DISTRICT NUMBER") %>%
group_by(District.Number) %>%
summarise(tea.all.stud = sum(ENROLLMENT),
tea.eco.dis = sum(eco.dis, na.rm = T)) %>%
mutate(eco.dis.pct = (tea.eco.dis/tea.all.stud)*100)
#This is something we request for the school rankings.
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6) %>%
#Small enrollment numbers are masked with numbers like <10, so here we'll remove all the "<" characters.
#Enrollment for small campuses will be an over estimate.
mutate(ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT"),
ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA)) %>%
rename(District.Number = "DISTRICT NUMBER") %>%
group_by(District.Number) %>%
summarise(tea.all.stud = sum(ENROLLMENT),
tea.eco.dis = sum(eco.dis, na.rm = T)) %>%
mutate(eco.dis.pct = (tea.eco.dis/tea.all.stud)*100)
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6) %>%
#Small enrollment numbers are masked with numbers like <10, so here we'll remove all the "<" characters.
#Enrollment for small campuses will be an over estimate.
mutate(ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT"),
ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA)) %>%
rename(District.Number = "DISTRICT NUMBER") %>%
group_by(District.Number) %>%
summarise(tea.all.stud = sum(ENROLLMENT),
tea.eco.dis = sum(eco.dis, na.rm = T)) %>%
mutate(eco.dis.pct = (tea.eco.dis/tea.all.stud)*100)
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6) %>%
#Small enrollment numbers are masked with numbers like <10, so here we'll remove all the "<" characters.
#Enrollment for small campuses will be an over estimate.
mutate(ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT"),
ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA)) %>%
rename(District.Number = "DISTRICT NUMBER") %>%
group_by(District.Number) %>%
summarise(tea.all.stud = sum(ENROLLMENT),
tea.eco.dis = sum(eco.dis, na.rm = T)) %>%
mutate(eco.dis.pct = (tea.eco.dis/tea.all.stud)*100)
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6) %>%
#Small enrollment numbers are masked with numbers like <10, so here we'll remove all the "<" characters.
#Enrollment for small campuses will be an over estimate.
mutate(ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT"),
ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA))
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6)
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6) %>%
#Small enrollment numbers are masked with numbers like <10, so here we'll remove all the "<" characters.
#Enrollment for small campuses will be an over estimate.
mutate(ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT"),
ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA))
#Small enrollment numbers are masked with numbers like <10, so here we'll remove all the "<" characters.
#Enrollment for small campuses will be an over estimate.
mutate(ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT"),
ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA)) %>%
rename(District.Number = "DISTRICT NUMBER")
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6) %>%
#Small enrollment numbers are masked with numbers like <10, so here we'll remove all the "<" characters.
#Enrollment for small campuses will be an over estimate.
mutate(ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT"),
ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA))
View(tea)
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6) %>%
#Small enrollment numbers are masked with numbers like <10, so here we'll remove all the "<" characters.
#Enrollment for small campuses will be an over estimate.
mutate(ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT"),
ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA)) %>%
rename(District.Number = "DISTRICT NUMBER")
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6) %>%
#Small enrollment numbers are masked with numbers like <10, so here we'll remove all the "<" characters.
#Enrollment for small campuses will be an over estimate.
mutate(ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT"),
ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA)) %>%
rename(District.Number = "DISTRICT NUMBER") %>%
group_by(District.Number)
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6) %>%
#Small enrollment numbers are masked with numbers like <10, so here we'll remove all the "<" characters.
#Enrollment for small campuses will be an over estimate.
mutate(ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT"),
ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA)) %>%
rename(District.Number = "DISTRICT NUMBER") %>%
group_by(District.Number) %>%
summarise(tea.all.stud = sum(ENROLLMENT),
tea.eco.dis = sum(eco.dis, na.rm = T))
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6) %>%
#Small enrollment numbers are masked with numbers like <10, so here we'll remove all the "<" characters.
#Enrollment for small campuses will be an over estimate.
mutate(ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT"),
ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA)) %>%
rename(District.Number = "DISTRICT NUMBER") %>%
group_by(District.Number) %>%
summarise(tea.all.stud = sum(ENROLLMENT),
tea.eco.dis = sum(eco.dis, na.rm = T)) %>%
mutate(eco.dis.pct = (tea.eco.dis/tea.all.stud)*100)
View(tea)
#This is something we request for the school rankings.
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6) %>%
#Small enrollment numbers are masked with numbers like <10, so here we'll remove all the "<" characters.
#Enrollment for small campuses will be an over estimate.
mutate(ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT"),
ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA)) %>%
rename(District.Number = "DISTRICT NUMBER") %>%
group_by(District.Number) %>%
summarise(tea.all.stud = sum(ENROLLMENT),
tea.eco.dis = sum(eco.dis, na.rm = T)) %>%
mutate(eco.dis.pct = (tea.eco.dis/tea.all.stud)*100)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# March 2023 Update
# Last year the file "Sample Dataset Template_PY21 SNP Meals_ChildrenAtRisk_11152021" outlined how the TDA data was manipulated in Excel before being imported into R. The goal with this update is to do as much work as possible in R.
library(knitr)
library(usethis)
library(tidyverse)
library(janitor)
library(reshape2)
library(stringr)
library(here)
library(readxl)
#This is something we request for the school rankings.
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6) %>%
#Small enrollment numbers are masked with numbers like <10, so here we'll remove all the "<" characters.
#Enrollment for small campuses will be an over estimate.
mutate(ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT"),
ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA)) %>%
rename(District.Number = "DISTRICT NUMBER") %>%
group_by(District.Number) %>%
summarise(tea.all.stud = sum(ENROLLMENT),
tea.eco.dis = sum(eco.dis, na.rm = T)) %>%
mutate(eco.dis.pct = (tea.eco.dis/tea.all.stud)*100)
#This is something we request for the school rankings.
tea <- read_xlsx("pru_7128_StudPgmStateCampus22state.xlsx", skip = 6)
#Small enrollment numbers are masked with numbers like <10, so here we'll remove all the "<" characters.
#Enrollment for small campuses will be an over estimate.
tea$ENROLLMENT = gsub("<", "", tea$"ALL ENROLLMENT")
tea <- tea %>%
mutate(ENROLLMENT = as.numeric(ENROLLMENT),
#Economically disadvantaged numbers are masked with "-999"
eco.dis = ifelse(tea$"ECONOMICALLY DISADVANTAGED" >= 0, tea$"ECONOMICALLY DISADVANTAGED", NA)) %>%
rename(District.Number = "DISTRICT NUMBER") %>%
group_by(District.Number) %>%
summarise(tea.all.stud = sum(ENROLLMENT),
tea.eco.dis = sum(eco.dis, na.rm = T)) %>%
mutate(eco.dis.pct = (tea.eco.dis/tea.all.stud)*100)
# This year TDA School Nutrition Program Data is from our public records request.
# It comes in an excel sheet with multiple tabs. We'll import each of the tabs, select the variables we want to keep, then join them together.
# This will probably look different next year. First check the Texas Open Data Portal for data before submitting records request.
# Notes from last year say that only the universal breakfast waiver information wasn't available without PIR
# Use this link to look for next year's data: https://data.texas.gov/stories/s/e2dm-5r4v
# Or see the Data Overview Pages in this link: https://squaremeals.org/FandN-Resources/Open-Data-Portal
# Contacts and Participation has CEP data
snp.contacts <- read_xlsx(here("WF Attachment 180587 PIR 23-194_PY22 SNP Meal Detail_01312023.xlsx"), sheet = 2) %>%
mutate(CEID = as.numeric(CEID),
SiteID = as.numeric(SiteID),
ESC.Region = as.numeric(ESC)) %>%
group_by(CEID, SiteID) %>%
rename(County = CECounty,
District = CountyDistrictCode) %>%
select(CEID, SiteID, CEName, District, ESC.Region,
SchoolBreakfastProgram, NationalSchoolLunchProgram, AfterschoolCareProgram,
SevereNeedBreakfast, UniversalFreeBreakfast, AreaEligibleSnack, CEP, Provision2)
#Meal Reimbursement Claims has the number of meals served
#This data includes meals in June and July. I'm assuming those were school years that started early or ended late.
#this tab has claims each month for each site
#the work here represents what was done in excel last year
snp.meal.reimb <- read_xlsx(here("WF Attachment 180587 PIR 23-194_PY22 SNP Meal Detail_01312023.xlsx"), sheet = 3) %>%
mutate(CEID = as.numeric(CEID),
SiteID = as.numeric(SiteID),
ESC.Region = as.numeric(ESC),
ClaimDate = as.character(ClaimDate),
#tda notes say that they consider october the typical snapshot for the year
#this is what they did last year
# EnrollmentQty = ifelse(ClaimDate == "2021-10-01", EnrollmentQty, 0),
# FreeEligQty = ifelse(ClaimDate == "2021-10-01", FreeEligQty, 0),
# RedcEligQty = ifelse(ClaimDate == "2021-10-01", RedcEligQty, 0),
# PaidEligQty = ifelse(ClaimDate == "2021-10-01", PaidEligQty, 0)
#only 455 sites submitted claims for October, though
) %>%
group_by(CEID, SiteID) %>%
summarise(
CEName = first(CEName),
County = first(CECounty),
District = first(CountyDistrictCode),
TypeOfOrg = first(TypeOfOrg),
ESC.Region = first(ESC.Region),
# this sum would find the october number, if we were using that method
# Enrollment_TDA = sum(EnrollmentQty, na.rm = T),
# Eligible.Free = sum(FreeEligQty, na.rm = T),
# Eligible.Reduced = sum(RedcEligQty, na.rm = T),
# sums here represent site total for year
SBP.Days.Served = sum(BreakfastDays, na.rm = T),
NSLP.Days.Served = sum(LunchDays, na.rm = T),
NSLP.Snack.Days.Served = sum(SnackDays, na.rm=T),
# SBP.Free = sum(BreakfastServedFree, na.rm=T),
# SBP.Reduced = sum(BreakfastServedRedc, na.rm=T),
# NSLP.Free = sum(LunchServedFree, na.rm=T),
# NSLP.Reduced = sum(LunchServedRedc, na.rm=T),
#Because for this particular year everyone could get free meals, I'm assuming those eligible for paid meals still didn't pay.
#so I'm going to look at all meals, regardless of eligibility
NSLP.Total = sum(LunchTotal),
SBP.Total = sum(BreakfastTotal)
)
snp <- full_join(snp.contacts, snp.meal.reimb, by = c("CEID", "SiteID", "CEName", "District", "ESC.Region"))
#I don't think we use the cacfp contacts tab for anything
#cacfp.contacts <- read_xlsx(here("WF Attachment 180587 PIR 23-194_PY22 SNP Meal Detail_01312023.xlsx"), sheet = 4)
#Not sure if we need this. These schools didn't serve universal breakfast even though they received money for free lunches.
#District granted waiver from Senate Bill 376: Lists of CEs and sites approved to waive the Universal Breakfast requirement for PY22.
#Before importing this data to R, manually check and add CEID and Site ID if not already in sheet
#ub.waiver <- read_xlsx(here("WF Attachment 180587 PIR 23-194_PY22 SNP Meal Detail_01312023.xlsx"), sheet = 5) %>%
#  rename(SiteID = "SITE ID", CEName = "CENAME") %>%
#  mutate(CEID = as.numeric(CEID),
#         SiteID = as.numeric(SiteID),
#         UniversalBreakfastWaiver = "Y") %>%
#  select(CEID, SiteID, CEName, UniversalBreakfastWaiver)
#snp.full <- full_join(snp, ub.waiver, by = c("CEID", "SiteID", "CEName"))
#This waiver has ended, so disregard this part next year.
sso <- read.csv("2021-2022_School_Meal_Count_-_TDA_F_N_Dashboard.csv") %>%
#Sept claims were incorrectly listed AS 2020-2021, so I'm fixing that issue here.
mutate(ProgramYear = "2021-2022") %>%
filter(ProgramYear == "2021-2022",
Program == "SEAMLESS_SUMMER_OPTION_MEALS") %>%
group_by(CEID, SiteID) %>%
summarise(
CEName = first(CEName),
County = first(CECounty),
District = first(CountyDistrictCode),
TypeOfOrg = first(TypeOfOrg),
ESC.Region = first(ESC),
#sums here represent site total for year
SSO.Breakfast = sum(BreakfastTotal, na.rm = T),
SSO.Lunch = sum(LunchTotal, na.rm = T),
SSO.Breakfast.Days = sum(BreakfastDays, na.rm = T),
SSO.Lunch.Days = sum(LunchDays, na.rm = T),
SSO.Snack.Days = sum(AMSnackDays + PMSnackDays, na.rm=T),
)
#Next year, use this link: https://data.texas.gov/stories/s/iekx-7mdi
#and scroll down to CACFP At-Risk Child Care Claims
cacfp <- read.csv(here("Child_and_Adult_Care_Food_Programs__CACFP____At_Risk__Meal_Reimbursement___Program_Year_2021-2022.csv")) %>%
mutate(CEID = as.numeric(CEID),
SiteID = as.numeric(SiteID),
ESC.Region = as.numeric(ESC)) %>%
group_by(CEID, SiteID) %>%
summarise(CEName = first(CEName),
County = first(CECounty),
District = first(CountyDistrictCode),
ESC.Region = first(ESC.Region),
CACFP.at.Risk.Supper.Days.Served = sum(SupperDays, na.rm=T),
CACFP.at.Risk.Snack.Days.Served = sum(SnackDays, na.rm=T))
harmony <- c(101858, 101862, 71806, 15828, 161807, 101846, 227816) #use to combine Harmony districts
kipp_data <- c(227820, 57837, 101813, 15826) #use to combine KIPP districts
#I couldn't find 57837, 101813, or 15826 in our data, so this kipp dataset doesn't do anything. Leaving it here just in case we need it in future years.
district <- full_join(snp, cacfp, by=c("CEID", "SiteID", "CEName", "District", "ESC.Region", "County")) %>%
full_join(sso, by=c("CEID", "SiteID", "CEName", "District", "ESC.Region", "County", "TypeOfOrg"))
district$District = gsub("-", "", district$District)
district <- district %>%
mutate(District = as.numeric(District)) %>%
mutate(
CEP01 = ifelse(CEP=="Y", 1, 0),
District.Number = ifelse(District %in% harmony, 227816,
ifelse(District %in% kipp_data, 227820, District))
) %>%
group_by(District.Number) %>%
summarise(
CEName = first(CEName),
County = first(na.omit(County)),
ESC.Region = first(ESC.Region),
TypeOfOrg = first(na.omit(TypeOfOrg)),
#Eligible.Free = sum(Eligible.Free, na.rm = T),
#Enrollment_TDA = sum(Enrollment_TDA, na.rm = T),
#Eligible.Reduced = sum(Eligible.Reduced, na.rm = T),
NSLP.Days.Served = max(NSLP.Days.Served, 0, na.rm = T),
#NSLP.Free = sum(NSLP.Free, na.rm=T),
#NSLP.Reduced = sum(NSLP.Reduced, na.rm=T),
SBP.Days.Served = max(SBP.Days.Served, 0, na.rm = T),
#SBP.Free = sum(SBP.Free, na.rm=T),
#SBP.Reduced = sum(SBP.Reduced, na.rm=T),
CACFP.at.Risk.Supper.Days.Served = sum(CACFP.at.Risk.Supper.Days.Served, na.rm=T),
CACFP.at.Risk.Snack.Days.Served = sum(CACFP.at.Risk.Snack.Days.Served, na.rm=T),
NSLP.Snack.Days.Served = sum(NSLP.Snack.Days.Served, na.rm=T),
CEP = sum(CEP01, na.rm=T),
SBP.Total = sum(SBP.Total, na.rm=T),
NSLP.Total = sum(NSLP.Total, na.rm=T),
#Next year we don't need SSO numbers
SSO.Breakfast = sum(SSO.Breakfast, na.rm = T),
SSO.Lunch = sum(SSO.Lunch, na.rm = T),
SSO.Breakfast.Days = max(SSO.Breakfast.Days, 0, na.rm = T),
SSO.Lunch.Days = max(SSO.Lunch.Days, 0, na.rm = T),
SSO.Snack.Days = max(SSO.Snack.Days, 0, na.rm = T)
) %>%
left_join(., tea, by="District.Number") %>%
mutate(
CEName = ifelse(District.Number==227820, "KIPP SCHOOLS", CEName),
#Eligible.Free and Eligible.Reduced are from the month with the greatest claims from schools
#next year use october numbers
#tda.frl.total = Eligible.Free + Eligible.Reduced,
# NSLP.Days.Served = ifelse(is.na(NSLP.Days.Served), 0, NSLP.Days.Served),
# SBP.Days.Served = ifelse(is.na(SBP.Days.Served), 0, SBP.Days.Served),
#don't need SSO next year, and instead of total, use free and reduced instead
Breakfast.Served = SSO.Breakfast + SBP.Total,
Breakfast.Days = SSO.Breakfast.Days + SBP.Days.Served,
Lunch.Served = SSO.Lunch + NSLP.Total,
Lunch.Days = SSO.Lunch.Days + NSLP.Days.Served,
Snack = SSO.Snack.Days + NSLP.Snack.Days.Served + CACFP.at.Risk.Snack.Days.Served,
#ADP is Average Daily Participation: The average number of students that ate on days meals were offered.
Breakfast.ADP = ifelse(Breakfast.Days==0, 0, Breakfast.Served/Breakfast.Days),
Lunch.ADP = ifelse(Lunch.Days==0, 0, (Lunch.Served/Lunch.Days)),
#Participation Rates are the percent of students that ate
Pct.Breakfast.Participation = (Breakfast.ADP/tea.all.stud)*100,
Pct.Lunch.Participation = (Lunch.ADP/tea.all.stud)*100,
cacfp_supper01 = ifelse(CACFP.at.Risk.Supper.Days.Served>0, 100, 0),
snack_anyafter =  ifelse(Snack>0, 100, 0)
)
#In previous years, we've found participation rates by dividing the number of free and reduced meals by the students that were eligible for them.
#We chose to do all meals for all students this year, since everyone was eligible for free meals under SSO.
district_rankings <- district %>%
#remove small districts (less than 10,000 students) and those that aren't at least 60% economically disadvantaged
filter(tea.all.stud>=10000 & eco.dis.pct >= 60) %>%
#This is where we find our overall score for food rankings
mutate(district_sum = ((Pct.Lunch.Participation*0.25)+(Pct.Breakfast.Participation*0.5)+(cacfp_supper01*0.1)+(snack_anyafter*0.15))) %>%
arrange(-district_sum) %>%
mutate(Rank = row_number()) %>%
select(CEName, TypeOfOrg, Rank, County, ESC.Region, tea.all.stud, eco.dis.pct, district_sum, Pct.Lunch.Participation,
Pct.Breakfast.Participation, cacfp_supper01, snack_anyafter, CEP) %>%
mutate(cacfp_supper01 = ifelse(cacfp_supper01==100, "Yes", "No"),
snack_anyafter = ifelse(snack_anyafter==100, "Yes", "No"),
CEP = ifelse(CEP>0, "Yes", "No")) %>%
mutate_if(is.numeric, round, digits = 1) %>%
reshape::rename(c(CEName = "District Name",
TypeOfOrg = "School Type",
ESC.Region = "ESC Region",
tea.all.stud = "Total Enrollment",
eco.dis.pct = "% Economically Disadvantaged",
district_sum = "Overall Score",
Pct.Lunch.Participation = "% Lunch Participation",
Pct.Breakfast.Participation = "% Breakfast Participation",
cacfp_supper01 = "CACFP Supper",
snack_anyafter = "Afterschool Snack"))
write_csv(district_rankings, here("foodrankings_PY22_10k.csv"))
topten <- district_rankings %>%
filter(Rank <= 10)
kable(topten, caption="Top 10 Districts Overall", format.args=list(big.mark=","))
#The decision to take out charter districts from this category was made by Dr. Bob: "Idea academy is a state wide District, they have schools all over the state, including San Antonio… So the number that is showing isnt for one district and one area, it’s all over the state, I probably would not include them in a large school district category, since they are not limited to one community."
district_50k <- district %>%
filter(tea.all.stud>=50000 & eco.dis.pct >= 60 & TypeOfOrg == "Public") %>%
mutate(district_sum = ((Pct.Lunch.Participation*0.25)+(Pct.Breakfast.Participation*0.5)+(cacfp_supper01*0.1)+(snack_anyafter*0.15))) %>%
arrange(-district_sum) %>%
mutate(Rank = row_number()) %>%
select(CEName, Rank, County, ESC.Region, tea.all.stud, eco.dis.pct, district_sum, Pct.Lunch.Participation,
Pct.Breakfast.Participation, cacfp_supper01, snack_anyafter, CEP) %>%
mutate(cacfp_supper01 = ifelse(cacfp_supper01==100, "Yes", "No"),
snack_anyafter = ifelse(snack_anyafter==100, "Yes", "No"),
CEP = ifelse(CEP>0, "Yes", "No")) %>%
mutate_if(is.numeric, round, digits = 1) %>%
reshape::rename(c(CEName = "District Name",
ESC.Region = "ESC Region",
tea.all.stud = "Total Enrollment",
eco.dis.pct = "% Economically Disadvantaged",
district_sum = "Overall Score",
Pct.Lunch.Participation = "% Lunch Participation",
Pct.Breakfast.Participation = "% Breakfast Participation",
cacfp_supper01 = "CACFP Supper",
snack_anyafter = "Afterschool Snack"))
#write_csv(district_50k, here("foodrankings_PY22_50k.csv"))
largedistricts <- district_50k %>%
filter(Rank <= 5)
kable(largedistricts, caption="Top 5 Large Districts", format.args=list(big.mark=","))
district_middleincome <- district %>%
filter(tea.all.stud>=10000 & eco.dis.pct >= 60 & eco.dis.pct <=70) %>%
mutate(district_sum = ((Pct.Lunch.Participation*0.25)+(Pct.Breakfast.Participation*0.5)+(cacfp_supper01*0.1)+(snack_anyafter*0.15))) %>%
arrange(-district_sum) %>%
mutate(Rank = row_number()) %>%
select(CEName, Rank, County, ESC.Region, tea.all.stud, eco.dis.pct, district_sum, Pct.Lunch.Participation,
Pct.Breakfast.Participation, cacfp_supper01, snack_anyafter, CEP) %>%
mutate(cacfp_supper01 = ifelse(cacfp_supper01==100, "Yes", "No"),
snack_anyafter = ifelse(snack_anyafter==100, "Yes", "No"),
CEP = ifelse(CEP>0, "Yes", "No")) %>%
mutate_if(is.numeric, round, digits = 1) %>%
reshape::rename(c(CEName = "District Name",
ESC.Region = "ESC Region",
tea.all.stud = "Total Enrollment",
eco.dis.pct = "% Economically Disadvantaged",
district_sum = "Overall Score",
Pct.Lunch.Participation = "% Lunch Participation",
Pct.Breakfast.Participation = "% Breakfast Participation",
cacfp_supper01 = "CACFP Supper",
snack_anyafter = "Afterschool Snack"))
#write_csv(district_middleincome, here("foodrankings_PY22_middleincome.csv"))
middleincomedistricts <- district_middleincome %>%
filter(Rank <= 5)
kable(middleincomedistricts, caption="Top 5 Middle-income Districts", format.args=list(big.mark=","))
breakfast <- district_rankings %>% arrange(-`% Breakfast Participation`)
lunch <- district_rankings %>% arrange(-`% Lunch Participation`)
#import data from each year
#PY21 needs SSO added
snp_PY22 <- read_csv("2021-2022_School_Meal_Count_-_TDA_F_N_Dashboard.csv") %>%
mutate(ProgramYear = "2021-2022") %>%
group_by(ProgramYear) %>%
summarise(BreakfastTotal = sum(BreakfastTotal, na.rm = T),
BreakfastDays = sum(BreakfastDays, na.rm = T),
LunchTotal = sum(LunchTotal, na.rm = T),
LunchDays = sum(LunchDays, na.rm = T))
# PY21 would need SFSP and SSO data added. I'm not going to mess with that, so I'll just leave it out.
# snp_PY21 <- read_csv("Longitudinal/School_Nutrition_Programs_-_Meal_Reimbursement_Information_-_Program_Year_2020-2021.csv") %>%
#   group_by(ProgramYear) %>%
#   summarise(BreakfastTotal = sum(BreakfastTotal, na.rm = T),
#             BreakfastDays = sum(BreakfastDays, na.rm = T),
#             LunchTotal = sum(LunchTotal, na.rm = T),
#             LunchDays = sum(LunchDays, na.rm = T))
# PY20 was the first year of the pandemic. I'm not sure if it needs data added like PY21, so I'm leaving it out as well.
# snp_PY20 <- read_csv("Longitudinal/School_Nutrition_Programs_-_Meal_Reimbursement_Information_-_Program_Year_2019-2020.csv") %>%
#   group_by(ProgramYear) %>%
#   summarise(BreakfastTotal = sum(BreakfastTotal, na.rm = T),
#             BreakfastDays = sum(BreakfastDays, na.rm = T),
#             LunchTotal = sum(LunchTotal, na.rm = T),
#             LunchDays = sum(LunchDays, na.rm = T))
snp_PY19 <- read_csv("Longitudinal/School_Nutrition_Programs___Meal_Reimbursement_Information___Program_Year_2018-2019.csv") %>%
group_by(ProgramYear) %>%
summarise(BreakfastTotal = sum(BreakfastTotal, na.rm = T),
BreakfastDays = sum(BreakfastDays, na.rm = T),
LunchTotal = sum(LunchTotal, na.rm = T),
LunchDays = sum(LunchDays, na.rm = T))
snp_PY18 <- read_csv("Longitudinal/School_Nutrition_Programs___Meal_Reimbursement_Information___Program_Year_2017-2018.csv") %>%
group_by(ProgramYear) %>%
summarise(BreakfastTotal = sum(BreakfastTotal, na.rm = T),
BreakfastDays = sum(BreakfastDays, na.rm = T),
LunchTotal = sum(LunchTotal, na.rm = T),
LunchDays = sum(LunchDays, na.rm = T))
snp_PY17 <- read_csv("Longitudinal/School_Nutrition_Programs___Meal_Reimbursement_Information___Program_Year_2016-2017.csv") %>%
group_by(ProgramYear) %>%
summarise(BreakfastTotal = sum(BreakfastTotal, na.rm = T),
BreakfastDays = sum(BreakfastDays, na.rm = T),
LunchTotal = sum(LunchTotal, na.rm = T),
LunchDays = sum(LunchDays, na.rm = T))
snp_PY16 <- read_csv("Longitudinal/School_Nutrition_Programs___Meal_Reimbursement_Information___Program_Year_2015-2016.csv") %>%
group_by(ProgramYear) %>%
summarise(BreakfastTotal = sum(BreakfastTotal, na.rm = T),
BreakfastDays = sum(BreakfastDays, na.rm = T),
LunchTotal = sum(LunchTotal, na.rm = T),
LunchDays = sum(LunchDays, na.rm = T))
#join data
snp_longitudinal <- full_join(snp_PY16,snp_PY17, by = c("ProgramYear", "BreakfastTotal", "BreakfastDays", "LunchTotal", "LunchDays")) %>%
full_join(snp_PY18, by=c("ProgramYear", "BreakfastTotal", "BreakfastDays", "LunchTotal", "LunchDays")) %>%
full_join(snp_PY19, by=c("ProgramYear", "BreakfastTotal", "BreakfastDays", "LunchTotal", "LunchDays")) %>%
#full_join(snp_PY20, by=c("ProgramYear", "BreakfastTotal", "BreakfastDays", "LunchTotal", "LunchDays")) %>%
#full_join(snp_PY21, by=c("ProgramYear", "BreakfastTotal", "BreakfastDays", "LunchTotal", "LunchDays")) %>%
full_join(snp_PY22, by=c("ProgramYear", "BreakfastTotal", "BreakfastDays", "LunchTotal", "LunchDays")) %>%
mutate(BreakfastADP = BreakfastTotal/BreakfastDays,
LunchADP = LunchTotal/LunchDays)
ggplot(snp_longitudinal, aes(x=ProgramYear)) +
geom_point(aes(y=LunchTotal, color="LunchTotal")) +
geom_point(aes(y=BreakfastTotal, color="BreakfastTotal")) +
coord_cartesian(ylim = c(0, 600000000)) +
scale_y_continuous(labels = scales::comma) +
labs(title = "Meals Served")
